// Code generated by mockery v2.22.1. DO NOT EDIT.

package client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metricdata "go.opentelemetry.io/otel/sdk/metric/metricdata"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// DiscoverServers provides a mock function with given fields: ctx
func (_m *MockClient) DiscoverServers(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DiscoverServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverServers'
type MockClient_DiscoverServers_Call struct {
	*mock.Call
}

// DiscoverServers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) DiscoverServers(ctx interface{}) *MockClient_DiscoverServers_Call {
	return &MockClient_DiscoverServers_Call{Call: _e.mock.On("DiscoverServers", ctx)}
}

func (_c *MockClient_DiscoverServers_Call) Run(run func(ctx context.Context)) *MockClient_DiscoverServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_DiscoverServers_Call) Return(_a0 []string, _a1 error) *MockClient_DiscoverServers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DiscoverServers_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockClient_DiscoverServers_Call {
	_c.Call.Return(run)
	return _c
}

// ExportMetrics provides a mock function with given fields: _a0, _a1
func (_m *MockClient) ExportMetrics(_a0 context.Context, _a1 *metricdata.ResourceMetrics) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *metricdata.ResourceMetrics) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_ExportMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportMetrics'
type MockClient_ExportMetrics_Call struct {
	*mock.Call
}

// ExportMetrics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *metricdata.ResourceMetrics
func (_e *MockClient_Expecter) ExportMetrics(_a0 interface{}, _a1 interface{}) *MockClient_ExportMetrics_Call {
	return &MockClient_ExportMetrics_Call{Call: _e.mock.On("ExportMetrics", _a0, _a1)}
}

func (_c *MockClient_ExportMetrics_Call) Run(run func(_a0 context.Context, _a1 *metricdata.ResourceMetrics)) *MockClient_ExportMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*metricdata.ResourceMetrics))
	})
	return _c
}

func (_c *MockClient_ExportMetrics_Call) Return(_a0 error) *MockClient_ExportMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ExportMetrics_Call) RunAndReturn(run func(context.Context, *metricdata.ResourceMetrics) error) *MockClient_ExportMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// FetchBootstrap provides a mock function with given fields: ctx
func (_m *MockClient) FetchBootstrap(ctx context.Context) (*BootstrapConfig, error) {
	ret := _m.Called(ctx)

	var r0 *BootstrapConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*BootstrapConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *BootstrapConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BootstrapConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_FetchBootstrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchBootstrap'
type MockClient_FetchBootstrap_Call struct {
	*mock.Call
}

// FetchBootstrap is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) FetchBootstrap(ctx interface{}) *MockClient_FetchBootstrap_Call {
	return &MockClient_FetchBootstrap_Call{Call: _e.mock.On("FetchBootstrap", ctx)}
}

func (_c *MockClient_FetchBootstrap_Call) Run(run func(ctx context.Context)) *MockClient_FetchBootstrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_FetchBootstrap_Call) Return(_a0 *BootstrapConfig, _a1 error) *MockClient_FetchBootstrap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_FetchBootstrap_Call) RunAndReturn(run func(context.Context) (*BootstrapConfig, error)) *MockClient_FetchBootstrap_Call {
	_c.Call.Return(run)
	return _c
}

// FetchTelemetryConfig provides a mock function with given fields: ctx
func (_m *MockClient) FetchTelemetryConfig(ctx context.Context) (*TelemetryConfig, error) {
	ret := _m.Called(ctx)

	var r0 *TelemetryConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*TelemetryConfig, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *TelemetryConfig); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TelemetryConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_FetchTelemetryConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchTelemetryConfig'
type MockClient_FetchTelemetryConfig_Call struct {
	*mock.Call
}

// FetchTelemetryConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) FetchTelemetryConfig(ctx interface{}) *MockClient_FetchTelemetryConfig_Call {
	return &MockClient_FetchTelemetryConfig_Call{Call: _e.mock.On("FetchTelemetryConfig", ctx)}
}

func (_c *MockClient_FetchTelemetryConfig_Call) Run(run func(ctx context.Context)) *MockClient_FetchTelemetryConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_FetchTelemetryConfig_Call) Return(_a0 *TelemetryConfig, _a1 error) *MockClient_FetchTelemetryConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_FetchTelemetryConfig_Call) RunAndReturn(run func(context.Context) (*TelemetryConfig, error)) *MockClient_FetchTelemetryConfig_Call {
	_c.Call.Return(run)
	return _c
}

// InitMetricsClient provides a mock function with given fields: ctx, endpoint
func (_m *MockClient) InitMetricsClient(ctx context.Context, endpoint string) error {
	ret := _m.Called(ctx, endpoint)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, endpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_InitMetricsClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitMetricsClient'
type MockClient_InitMetricsClient_Call struct {
	*mock.Call
}

// InitMetricsClient is a helper method to define mock.On call
//   - ctx context.Context
//   - endpoint string
func (_e *MockClient_Expecter) InitMetricsClient(ctx interface{}, endpoint interface{}) *MockClient_InitMetricsClient_Call {
	return &MockClient_InitMetricsClient_Call{Call: _e.mock.On("InitMetricsClient", ctx, endpoint)}
}

func (_c *MockClient_InitMetricsClient_Call) Run(run func(ctx context.Context, endpoint string)) *MockClient_InitMetricsClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_InitMetricsClient_Call) Return(_a0 error) *MockClient_InitMetricsClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_InitMetricsClient_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_InitMetricsClient_Call {
	_c.Call.Return(run)
	return _c
}

// PushServerStatus provides a mock function with given fields: ctx, status
func (_m *MockClient) PushServerStatus(ctx context.Context, status *ServerStatus) error {
	ret := _m.Called(ctx, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ServerStatus) error); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_PushServerStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PushServerStatus'
type MockClient_PushServerStatus_Call struct {
	*mock.Call
}

// PushServerStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status *ServerStatus
func (_e *MockClient_Expecter) PushServerStatus(ctx interface{}, status interface{}) *MockClient_PushServerStatus_Call {
	return &MockClient_PushServerStatus_Call{Call: _e.mock.On("PushServerStatus", ctx, status)}
}

func (_c *MockClient_PushServerStatus_Call) Run(run func(ctx context.Context, status *ServerStatus)) *MockClient_PushServerStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ServerStatus))
	})
	return _c
}

func (_c *MockClient_PushServerStatus_Call) Return(_a0 error) *MockClient_PushServerStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_PushServerStatus_Call) RunAndReturn(run func(context.Context, *ServerStatus) error) *MockClient_PushServerStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ShutdownMetricsClient provides a mock function with given fields: ctx
func (_m *MockClient) ShutdownMetricsClient(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_ShutdownMetricsClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShutdownMetricsClient'
type MockClient_ShutdownMetricsClient_Call struct {
	*mock.Call
}

// ShutdownMetricsClient is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) ShutdownMetricsClient(ctx interface{}) *MockClient_ShutdownMetricsClient_Call {
	return &MockClient_ShutdownMetricsClient_Call{Call: _e.mock.On("ShutdownMetricsClient", ctx)}
}

func (_c *MockClient_ShutdownMetricsClient_Call) Run(run func(ctx context.Context)) *MockClient_ShutdownMetricsClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_ShutdownMetricsClient_Call) Return(_a0 error) *MockClient_ShutdownMetricsClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ShutdownMetricsClient_Call) RunAndReturn(run func(context.Context) error) *MockClient_ShutdownMetricsClient_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
